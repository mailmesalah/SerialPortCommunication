/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serialcommunication;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.comm.CommPortIdentifier;
import javax.comm.PortInUseException;
import javax.comm.SerialPort;
import javax.comm.SerialPortEvent;
import javax.comm.SerialPortEventListener;
import javax.comm.UnsupportedCommOperationException;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author Sely
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        listAllSerialPorts();
        makeGUI();
        waitForIncomingData();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Serial Port Scanning");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 639, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 379, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        new MainWindow().setVisible(true);

    }

    /*
     List all Ports available
     */
    private void listAllSerialPorts() {
        try {
            // get list of ports available on this particular computer,
            // by calling static method in CommPortIdentifier.
            Enumeration pList = CommPortIdentifier.getPortIdentifiers();

            // Process the list, putting serial and parallel into ComboBoxes
            while (pList.hasMoreElements()) {
                CommPortIdentifier cpi = (CommPortIdentifier) pList.nextElement();

                if (cpi.getPortType() == CommPortIdentifier.PORT_SERIAL) {
                    ports.add(cpi);
                    portsStatus.add(false);
                }
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void makeGUI() {

        JPanel centerPanel = new JPanel();
        this.setContentPane(centerPanel);
        centerPanel.setLayout(new GridLayout(0, 6, PAD, PAD));
        centerPanel.add(new JLabel("Port", JLabel.CENTER));
        centerPanel.add(new JLabel("Baud", JLabel.CENTER));
        centerPanel.add(new JLabel("Data Bits", JLabel.CENTER));
        centerPanel.add(new JLabel("Stop Bit", JLabel.CENTER));
        centerPanel.add(new JLabel("Parity", JLabel.CENTER));
        centerPanel.add(new JLabel(" ", JLabel.CENTER));

        for (int i = 0; i < ports.size(); i++) {

            CommPortIdentifier cpi = (CommPortIdentifier) ports.get(i);
            centerPanel.add(new JLabel(cpi.getName(), JLabel.RIGHT));
            final SerialPortSettings sps = new SerialPortSettings(cpi);

            JComboBox bauds = new JComboBox();
            bauds.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    JComboBox jcb = (JComboBox) e.getSource();
                    int baud = Integer.parseInt(jcb.getSelectedItem().toString());
                    sps.setBaud(baud);
                }
            });
            centerPanel.add(bauds);
            bauds.addItem("75");
            bauds.addItem("110");
            bauds.addItem("300");
            bauds.addItem("1200");
            bauds.addItem("2400");
            bauds.addItem("4800");
            bauds.addItem("9600");
            bauds.addItem("19200");
            bauds.addItem("38400");
            bauds.addItem("57600");
            bauds.addItem("115200");
            bauds.setSelectedIndex(6);
            sps.setBaud(9600);

            JComboBox dataBits = new JComboBox();
            dataBits.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    JComboBox jcb = (JComboBox) e.getSource();
                    int databit = Integer.parseInt(jcb.getSelectedItem().toString());
                    sps.setDatabit(databit);
                }
            });
            centerPanel.add(dataBits);
            dataBits.addItem(SerialPort.DATABITS_5);
            dataBits.addItem(SerialPort.DATABITS_6);
            dataBits.addItem(SerialPort.DATABITS_7);
            dataBits.addItem(SerialPort.DATABITS_8);
            dataBits.setSelectedIndex(3);
            sps.setDatabit(8);

            JComboBox stopBit = new JComboBox();
            stopBit.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    JComboBox jcb = (JComboBox) e.getSource();
                    int stopB = jcb.getSelectedIndex() + 1;
                    sps.setStopbit(stopB);
                }
            });
            centerPanel.add(stopBit);
            stopBit.addItem("1");
            stopBit.addItem("2");
            stopBit.addItem("1.5");
            sps.setStopbit(1);

            JComboBox parity = new JComboBox();
            parity.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    JComboBox jcb = (JComboBox) e.getSource();
                    sps.setParity(jcb.getSelectedIndex());
                }
            });
            centerPanel.add(parity);
            parity.addItem("None");
            parity.addItem("Odd");
            parity.addItem("Even");
            parity.addItem("Mark");
            parity.addItem("Space");
            sps.setParity(0);

            JButton startButton = new JButton("Start");
            centerPanel.add(startButton);

            startButton.addMouseListener(new MouseAdapter() {

                int i = count;

                @Override
                public void mouseClicked(MouseEvent e) {
                    try {
                        JButton jb = (JButton) e.getSource();
                        if (jb.getText().trim().equals("Start")) {
                            stopListeningPort();
                            //waitForIncomingData();
                            
                            jb.setText("Stop");
                        } else if (jb.getText().trim().equals("Stop")) {
                            stopListeningPort();
                            //();
                            
                            jb.setText("Start");
                        }
                    } catch (Exception ex) {
                        System.out.println(ex.getMessage());
                    }
                }

            });

            portsSettings.add(sps);

            count++;
        }

        centerPanel.add(new JLabel("", JLabel.CENTER));
        centerPanel.add(new JLabel("", JLabel.CENTER));
        centerPanel.add(new JLabel("", JLabel.CENTER));
        centerPanel.add(new JLabel("", JLabel.CENTER));
        centerPanel.add(new JLabel("", JLabel.CENTER));

        JButton debug = new JButton("Debug");
        centerPanel.add(debug);

        debug.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    JButton jb = (JButton) e.getSource();
                    if (jb.getText().trim().equals("Debug")) {
                        System.out.println("Debug");
                    }
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }

        });

        this.pack();

    }

    private void waitForIncomingData() {

        try {

            CommPortIdentifier cpi;
            int bauD, dataB, stopB, paritY;

            for (int i = 0; i < portsSettings.size(); i++) {
                SerialPortSettings sps = (SerialPortSettings) portsSettings.get(i);
                cpi = sps.getPort();
                bauD = sps.getBaud();
                dataB = sps.getDatabit();
                stopB = sps.getStopbit();
                paritY = sps.getParity();

                System.out.println(cpi.getName() + " " + bauD + " " + dataB + " " + stopB + " " + " " + paritY);

                final SerialPort sp;
                try {
                    sp = (SerialPort) cpi.open("Serial Port Communication", TIMEOUTSECONDS * 1000);
                    sp.setSerialPortParams(bauD, dataB, stopB, paritY);

                    sp.addEventListener(new SerialPortEventListener() {
                        SerialPort spp = sp;
                        InputStream inputStream;

                        @Override
                        public void serialEvent(SerialPortEvent spe) {

                            switch (spe.getEventType()) {
                                case SerialPortEvent.BI:
                                case SerialPortEvent.OE:
                                case SerialPortEvent.FE:
                                case SerialPortEvent.PE:
                                case SerialPortEvent.CD:
                                case SerialPortEvent.CTS:
                                case SerialPortEvent.DSR:
                                case SerialPortEvent.RI:
                                case SerialPortEvent.OUTPUT_BUFFER_EMPTY:
                                    break;
                                case SerialPortEvent.DATA_AVAILABLE:
                                    byte[] readBuffer = new byte[20];

                                    try {
                                        inputStream = spp.getInputStream();
                                    } catch (IOException e) {
                                        System.out.println(e);
                                    }

                                    try {
                                        while (inputStream.available() > 0) {
                                            int numBytes = inputStream.read(readBuffer);
                                        }
                                        System.out.print(new String(readBuffer));
                                    } catch (IOException e) {
                                        System.out.println(e);
                                    }
                                    break;
                            }
                        }
                    });
                } catch (PortInUseException | UnsupportedCommOperationException ex) {
                    System.out.println("Error: " + sps.getPort() + " " + ex);
                }

            }

        } catch (Exception e) {
            System.out.println(e);
        }

    }

    private void stopListeningPort() {
        for (int i = 0; i < portsSettings.size(); i++) {
            SerialPortSettings sps = (SerialPortSettings) portsSettings.get(i);
            CommPortIdentifier cpi = sps.getPort();
            try {
                SerialPort sp = (SerialPort) cpi.open("Serial Port Communication", TIMEOUTSECONDS * 1000);
                sp.close();
            } catch (PortInUseException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
           
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private ArrayList ports = new ArrayList<CommPortIdentifier>();
    private ArrayList portsSettings = new ArrayList<SerialPortSettings>();
    private ArrayList portsStatus = new ArrayList<Boolean>();
    private final int PAD = 5, TIMEOUTSECONDS = 3;
    private static int count = 0;
}

class SerialPortSettings {

    CommPortIdentifier port;
    int baud;
    int databit;
    int stopbit;
    int parity;

    public SerialPortSettings(CommPortIdentifier port) {
        this.port = port;
    }

    public SerialPortSettings(CommPortIdentifier cp, int bI, int dI, int sI, int pI) {
        port = cp;
        baud = bI;
        databit = dI;
        stopbit = sI;
        parity = pI;
    }

    public int getBaud() {
        return baud;
    }

    public void setBaud(int baudIndex) {
        this.baud = baudIndex;
    }

    public int getDatabit() {
        return databit;
    }

    public void setDatabit(int databitIndex) {
        this.databit = databitIndex;
    }

    public int getStopbit() {
        return stopbit;
    }

    public void setStopbit(int stopbitIndex) {
        this.stopbit = stopbitIndex;
    }

    public int getParity() {
        return parity;
    }

    public void setParity(int parityIndex) {
        this.parity = parityIndex;
    }

    public CommPortIdentifier getPort() {
        return port;
    }

}
